{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2024-06-11T20:17:22.489Z",
    "end": "2024-06-11T20:17:22.730Z",
    "duration": 241,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "04db8346-f70e-4be9-b5c2-d47f3a2612c9",
      "title": "",
      "fullFile": "C:\\Users\\Dell\\Desktop\\Test-Submission-Task-2\\__tests__\\unit\\unit.test.js",
      "file": "\\__tests__\\unit\\unit.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c11e8dcf-8ec8-4e68-aa7e-825ebd000c81",
          "title": "Logic Unit Tests",
          "fullFile": "C:\\Users\\Dell\\Desktop\\Test-Submission-Task-2\\__tests__\\unit\\unit.test.js",
          "file": "\\__tests__\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve all products",
              "fullTitle": "Logic Unit Tests should retrieve all products",
              "timedOut": false,
              "duration": 125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const products = await logic.getAllProducts();\nexpect(products).to.be.an('array');\nexpect(products).to.have.length.above(0);",
              "err": {},
              "uuid": "18a4faba-4b9b-4988-b1f5-8b3a01d0d1fd",
              "parentUUID": "c11e8dcf-8ec8-4e68-aa7e-825ebd000c81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new products",
              "fullTitle": "Logic Unit Tests should create a new products",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newProduct = { name: 'Bottle', description: 'water bottle', price: 100, quantity: 10, category: 'Accessory' };\nconst result = await logic.createProduct(newProduct);\nexpect(result).to.be.an('object');\nexpect(result.id).to.be.a('number');\ntestId = parseInt(result.id);\nconsole.log(result.id);",
              "err": {},
              "uuid": "9127ace4-457c-4ddd-8200-9ad9ff056226",
              "parentUUID": "c11e8dcf-8ec8-4e68-aa7e-825ebd000c81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve products by name",
              "fullTitle": "Logic Unit Tests should retrieve products by name",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const products = await logic.getProductsByName('Bottle');\nexpect(products).to.be.an('array');\nexpect(products).to.have.length.above(0);\nexpect(products[0].name).to.include('Bottle');",
              "err": {},
              "uuid": "76e9dcb3-b608-4a01-a86b-0746b8ee12da",
              "parentUUID": "c11e8dcf-8ec8-4e68-aa7e-825ebd000c81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a product by ID",
              "fullTitle": "Logic Unit Tests should retrieve a product by ID",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const product = await logic.getProductById(testId);\nexpect(product).to.be.an('object');\nexpect(product.id).to.equal(testId);",
              "err": {},
              "uuid": "5153d91c-cebb-405c-8d10-686a3804e52d",
              "parentUUID": "c11e8dcf-8ec8-4e68-aa7e-825ebd000c81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a product",
              "fullTitle": "Logic Unit Tests should update a product",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedProduct = { name: 'Pen', description: 'gel', price: 45, quantity: 25, category: 'Statonary' };\nawait logic.updateProduct(updatedProduct, testId);\nconst product = await logic.getProductById(testId);\nexpect(product.name).to.equal('Pen');\nexpect(product.price).to.equal(45);",
              "err": {},
              "uuid": "9f403759-6d36-4724-af63-d751991af6ae",
              "parentUUID": "c11e8dcf-8ec8-4e68-aa7e-825ebd000c81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a product by ID",
              "fullTitle": "Logic Unit Tests should delete a product by ID",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logic.deleteProduct(testId);\nconst products = await logic.getAllProducts();\nexpect(products.find(p => p.id === testId)).to.be.undefined;",
              "err": {},
              "uuid": "f4e8001b-cbab-47f2-9646-d801fb205d98",
              "parentUUID": "c11e8dcf-8ec8-4e68-aa7e-825ebd000c81",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "18a4faba-4b9b-4988-b1f5-8b3a01d0d1fd",
            "9127ace4-457c-4ddd-8200-9ad9ff056226",
            "76e9dcb3-b608-4a01-a86b-0746b8ee12da",
            "5153d91c-cebb-405c-8d10-686a3804e52d",
            "9f403759-6d36-4724-af63-d751991af6ae",
            "f4e8001b-cbab-47f2-9646-d801fb205d98"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 227,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "unit",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "unit"
      },
      "version": "6.2.0"
    }
  }
}
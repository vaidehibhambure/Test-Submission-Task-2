{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2024-06-11T10:12:15.947Z",
    "end": "2024-06-11T10:12:16.529Z",
    "duration": 582,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9d9a0d22-243a-4fe4-85d5-3a0e5878fe22",
      "title": "",
      "fullFile": "C:\\Users\\Dell\\Desktop\\Test-Submission-Task-2\\__tests__\\integration\\integration.test.js",
      "file": "\\__tests__\\integration\\integration.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "10b77ac7-fd53-4e39-b32e-c178cce071f8",
          "title": "Integration Tests",
          "fullFile": "C:\\Users\\Dell\\Desktop\\Test-Submission-Task-2\\__tests__\\integration\\integration.test.js",
          "file": "\\__tests__\\integration\\integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Integration Tests\"",
              "fullTitle": "Integration Tests \"before all\" hook in \"Integration Tests\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Here you can set up your test database if necessary",
              "err": {},
              "uuid": "c33b2b2d-d21f-4680-9cb1-b485b15e1a25",
              "parentUUID": "10b77ac7-fd53-4e39-b32e-c178cce071f8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Integration Tests\"",
              "fullTitle": "Integration Tests \"after all\" hook in \"Integration Tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clean up your test database if necessary",
              "err": {},
              "uuid": "00b32fde-8c82-4fde-ab54-2bd7cd3543c1",
              "parentUUID": "10b77ac7-fd53-4e39-b32e-c178cce071f8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should retrieve all products",
              "fullTitle": "Integration Tests should retrieve all products",
              "timedOut": false,
              "duration": 192,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(server).get('/api/products');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
              "err": {},
              "uuid": "527d93b9-d312-42f9-afb3-4cb58a3d627f",
              "parentUUID": "10b77ac7-fd53-4e39-b32e-c178cce071f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new product",
              "fullTitle": "Integration Tests should create a new product",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newProduct = {\n    name: 'Test Chair',\n    description: 'A comfortable test chair',\n    price: 50.00,\n    quantity: 5,\n    category: 'Test Furniture'\n};\nconst res = await request(server).post('/api/products').send(newProduct);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.be.an('object');\nexpect(res.body.id).to.be.a('number');\ncreatedProductId = res.body.id;",
              "err": {},
              "uuid": "67cbc13f-82c5-4615-900a-1a7b6df245ba",
              "parentUUID": "10b77ac7-fd53-4e39-b32e-c178cce071f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a product by ID",
              "fullTitle": "Integration Tests should retrieve a product by ID",
              "timedOut": false,
              "duration": 43,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Retrieving product ID:', createdProductId); // Add this line\nconst res = await request(server).get(`/api/products/${createdProductId}`);\nconsole.log('Retrieve product response:', res.body); // Add this line\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('object');\nexpect(res.body.id).to.equal(createdProductId); // Corrected comparison",
              "err": {},
              "uuid": "c7b589e1-8878-4a87-b299-3ca854575f4f",
              "parentUUID": "10b77ac7-fd53-4e39-b32e-c178cce071f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve products by name",
              "fullTitle": "Integration Tests should retrieve products by name",
              "timedOut": false,
              "duration": 57,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newProduct = {\n    name: 'Test Chair',\n    description: 'A comfortable test sofa',\n    price: 150.00,\n    quantity: 2,\n    category: 'Test Furniture'\n};\nawait request(server).post(`/api/products`).send(newProduct);\nconst res = await request(server).get(`/api/products?name=Test Chair`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body[0].name).to.equal('Test Chair');",
              "err": {},
              "uuid": "b9933486-40b0-4e6a-903b-23347f59dfb0",
              "parentUUID": "10b77ac7-fd53-4e39-b32e-c178cce071f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a product",
              "fullTitle": "Integration Tests should update a product",
              "timedOut": false,
              "duration": 62,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedProduct = { name: 'Updated Test Chair', description: 'An updated test chair', price: 60.00, quantity: 3, category: 'Updated Test Furniture' };\nconst res = await request(server).put(`/api/products/${createdProductId}`).send(updatedProduct);\nconsole.log(\"I am here\");\nexpect(res.status).to.equal(204);\n// Verify the update\nconst getRes = await request(server).get(`/api/products/${createdProductId}`);\n//console.log(\"I am here now\");//\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body.name).to.equal('Updated Test Chair');",
              "err": {},
              "uuid": "8deb0e48-e7a5-453b-8e4c-804c8595ba2c",
              "parentUUID": "10b77ac7-fd53-4e39-b32e-c178cce071f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a product by ID",
              "fullTitle": "Integration Tests should delete a product by ID",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(server).delete(`/api/products/${createdProductId}`);\nexpect(res.status).to.equal(204);\n// Verify the deletion\nconst getRes = await request(server).get(`/api/products/${createdProductId}`);\nexpect(getRes.status).to.equal(404); // assuming you return a 404 for not found",
              "err": {},
              "uuid": "becd8ad3-5df4-4925-8036-239fbc8bf9e6",
              "parentUUID": "10b77ac7-fd53-4e39-b32e-c178cce071f8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "527d93b9-d312-42f9-afb3-4cb58a3d627f",
            "67cbc13f-82c5-4615-900a-1a7b6df245ba",
            "c7b589e1-8878-4a87-b299-3ca854575f4f",
            "b9933486-40b0-4e6a-903b-23347f59dfb0",
            "8deb0e48-e7a5-453b-8e4c-804c8595ba2c",
            "becd8ad3-5df4-4925-8036-239fbc8bf9e6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 539,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "integration",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "integration"
      },
      "version": "6.2.0"
    }
  }
}